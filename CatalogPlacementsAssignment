import java.util.*;
import java.io.*;

public class ShamirSecretSharing {
    static final int PRIME = 9973;

    static class Share {
        int x, y;
        Share(int x, int y) { this.x = x; this.y = y; }
        @Override public String toString() { return "(" + x + "," + y + ")"; }
    }

    static int modInverse(int a, int m) {
        int m0 = m, y = 0, x = 1;
        if (m == 1) return 0;
        while (a > 1) {
            int q = a / m, t = m;
            m = a % m; a = t;
            t = y;
            y = x - q * y;
            x = t;
        }
        return x < 0 ? x + m0 : x;
    }

    static int evaluatePolynomial(int[] coeffs, int x) {
        int result = 0, power = 1;
        for (int coeff : coeffs) {
            result = (result + coeff * power) % PRIME;
            power = (power * x) % PRIME;
        }
        return result;
    }

    static ArrayList<Share> generateShares(int secret, int n, int k, Random rand) {
        int[] coeffs = new int[k];
        coeffs[0] = secret;
        for (int i = 1; i < k; ++i) {
            coeffs[i] = rand.nextInt(PRIME);
        }
        ArrayList<Share> shares = new ArrayList<>();
        for (int i = 1; i <= n; ++i) {
            shares.add(new Share(i, evaluatePolynomial(coeffs, i)));
        }
        return shares;
    }

    static int reconstructSecret(List<Share> shares) {
        int secret = 0;
        for (int i = 0; i < shares.size(); ++i) {
            int xi = shares.get(i).x, yi = shares.get(i).y;
            int li = 1;
            for (int j = 0; j < shares.size(); ++j) {
                if (i != j) {
                    int xj = shares.get(j).x;
                    int num = (0 - xj + PRIME) % PRIME;
                    int den = (xi - xj + PRIME) % PRIME;
                    li = li * num % PRIME * modInverse(den, PRIME) % PRIME;
                }
            }
            secret = (secret + yi * li % PRIME) % PRIME;
        }
        return secret;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Random rand = new Random();

        System.out.print("Enter secret (as a number less than " + PRIME + "): ");
        int secret = sc.nextInt();
        System.out.print("Enter total number of shares to generate (n): ");
        int n = sc.nextInt();
        System.out.print("Enter minimum shares required to reconstruct (k): ");
        int k = sc.nextInt();

        if (secret >= PRIME || k > n || secret < 0) {
            System.err.println("Invalid input. Make sure 0 â‰¤ secret < " + PRIME + " and k â‰¤ n.");
            return;
        }

        ArrayList<Share> shares = generateShares(secret, n, k, rand);
        System.out.println("\nGenerated Shares:");
        for (Share s : shares) System.out.println(s);

        List<Share> selectedShares = shares.subList(0, k);
        int recovered = reconstructSecret(selectedShares);

        System.out.println("\nReconstructed Secret using first " + k + " shares: " + recovered);
    }
}
